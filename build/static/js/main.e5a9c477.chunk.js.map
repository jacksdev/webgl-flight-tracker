{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["initialViewState","longitude","latitude","zoom","pitch","bearing","App","state","planes","fetchFlightData","app","Object","assertThisInitialized","_this","fetch","then","res","json","myJson","data","states","console","log","setState","map","d","callsign","long","lat","velocity","alt","orgin","this","layer","ScatterplotLayer","id","pickable","opacity","filled","radiusMinPixels","getPosition","getColor","react_default","a","createElement","esm","controller","layers","dist_esm","mapboxApiAccessToken","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2WAWMA,EAAmB,CACvBC,WAAY,UACZC,SAAU,QACVC,KAAM,GACNC,MAAO,GACPC,QAAS,GA6EIC,6MAnEbC,MAAQ,CACNC,OAAQ,MASVC,gBAAkB,WAEhB,IAAIC,EAAGC,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAAE,IAEPC,MAAM,8CACLC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAASG,GACb,IAAIC,EAAOD,EAAOE,OAElB,OADAC,QAAQC,WAAWH,GACZT,EAAIa,SAAS,CAClBf,OAAQW,EAAKK,IAAI,SAAAC,GAAC,MAAK,CACrBC,SAAUD,EAAE,GACZE,KAAMF,EAAE,GACRG,IAAKH,EAAE,GACPI,SAAUJ,EAAE,GACZK,IAAKL,EAAE,IACPM,MAAON,EAAE,+FApBfO,KAAKvB,kBACLY,QAAQC,uCA8BR,IAAMW,EAAQ,IAAIC,IAAiB,CACjCC,GAAI,2BACJhB,KAAMa,KAAKzB,MAAMC,OACjB4B,UAAU,EACVC,QAAS,GACTC,QAAQ,EACRC,gBAAiB,GACjBC,YAAa,SAAAf,GAAC,MAAI,CAACA,EAAEE,KAAMF,EAAEG,MAC7Ba,SAAU,SAAAhB,GAAC,MAAI,CAAC,IAAK,IAAK,MAS5B,OACEiB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACE7C,iBAAkBA,EAClB8C,YAAY,EACZC,OAAQd,GAERS,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAWC,qBA9ES,sGAeVC,IAAMC,WCXJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjD,KAAK,SAAAkD,GACjCA,EAAaC","file":"static/js/main.e5a9c477.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport DeckGL, {ScatterplotLayer} from 'deck.gl';\nimport * as d3 from 'd3';\nimport {StaticMap} from 'react-map-gl';\n\n// Set your mapbox access token here\nconst MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiamZyb2xvdiIsImEiOiJjanFta2JhMTAzdGVsNDRsYjZjbnB2aGk2In0.E1v_EBQE7FeLEx_q0S3ELg';\n\n// Initial viewport settings\nconst initialViewState = {\n  longitude: -122.41669,\n  latitude: 37.7853,\n  zoom: 13,\n  pitch: 36,\n  bearing: 0\n};\n\n// Data to be used by the LineLayer\n\n\n\nclass App extends React.Component {\n\n\n  state = {\n    planes: []\n  }\n\n\n  componentDidMount(){\n    this.fetchFlightData()\n    console.log()\n  }\n\n  fetchFlightData = () => {\n\n    let app = this\n\n    fetch('https://opensky-network.org/api/states/all')\n    .then(res => res.json())\n    .then(function(myJson) {\n      let data = myJson.states;\n      console.log(typeof data)\n      return app.setState({\n        planes: data.map(d => ({\n          callsign: d[1],\n          long: d[5],\n          lat: d[6],\n          velocity: d[9],\n          alt: d[13],\n          orgin: d[16]\n        }))\n      })\n\n    });\n\n  }\n  \n\n  render() {\n\n    const layer = new ScatterplotLayer({\n      id: 'scatterplot-layer-planes',\n      data: this.state.planes,\n      pickable: false,\n      opacity: 0.3,\n      filled: true,\n      radiusMinPixels: 10,\n      getPosition: d => [d.long, d.lat],\n      getColor: d => [255, 140, 0],\n      // onHover: ({d, x, y}) => {\n      //   const tooltip = `${d.callsign}\\n${d.orgin}`;\n\n      // }\n    });\n\n    \n\n    return (\n      <DeckGL\n        initialViewState={initialViewState}\n        controller={true}\n        layers={layer}\n      >\n        <StaticMap mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN} />\n      </DeckGL>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}